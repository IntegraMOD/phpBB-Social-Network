/*
    Watermark v3.1.4 plugin for jQuery
    (Updated to jQuery 3.7+ and implemented no-conflict mode, integramod.com, December 2024)
    http://jquery-watermark.googlecode.com/
    Copyright (c) 2009-2023 Todd Northrop
    http://www.speednet.biz/
    Dual licensed under the MIT or GPL Version 2 licenses.
*/
(function(factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node/CommonJS
        module.exports = function(root, jQuery) {
            if (jQuery === undefined) {
                if (typeof window !== 'undefined') {
                    jQuery = require('jquery');
                } else {
                    jQuery = require('jquery')(root);
                }
            }
            factory(jQuery);
            return jQuery;
        };
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function($) {
    'use strict';
 
    var win = window;
    var doc = win.document;
    var TRUE = true;
    var FALSE = false;
    var EMPTY = "";
    var PLACEHOLDER = "placeholder";
    var WATERMARK = "watermark";
    var WATERMARK_CLASS = WATERMARK + "Class";
    var WATERMARK_FOCUS = WATERMARK + "Focus";
    var WATERMARK_SUBMIT = WATERMARK + "Submit";
    var WATERMARK_MAXLENGTH = WATERMARK + "MaxLength";
    var WATERMARK_PASSWORD = WATERMARK + "Password";
    var WATERMARK_TEXT = WATERMARK + "Text";
 
    var hasNativePlaceholder = PLACEHOLDER in doc.createElement("input");
 
    $.watermark = $.watermark || {
        version: "3.1.4",
        runOnce: TRUE,
        options: {
            className: WATERMARK,
            useNative: TRUE,
            hideBeforeUnload: TRUE
        },
        hide: function(selector) {
            $(selector).filter(":data(" + WATERMARK + ")").each(function() {
                $.watermark._hide($(this));
            });
        },
        _hide: function($input, focus) {
            var inputVal = ($input.val() || EMPTY).replace(/\r/g, EMPTY);
            var inputWm = $input.data(WATERMARK_TEXT) || EMPTY;
            var maxLen = $input.data(WATERMARK_MAXLENGTH) || 0;
            var className = $input.data(WATERMARK_CLASS);
 
            if (inputWm.length && inputVal === inputWm) {
                $input.val(EMPTY);
 
                // Password type?
                if ($input.data(WATERMARK_PASSWORD)) {
                    if (($input.attr("type") || EMPTY) === "text") {
                        var $pwd = $input.data(WATERMARK_PASSWORD) || [];
                        var $wrap = $input.parent() || [];
 
                        if ($pwd.length && $wrap.length) {
                            $wrap[0].removeChild($input[0]);
                            $wrap[0].appendChild($pwd[0]);
                            $input = $pwd;
                        }
                    }
                }
 
                if (maxLen) {
                    $input.attr("maxLength", maxLen);
                    $input.removeData(WATERMARK_MAXLENGTH);
                }
 
                if (focus) {
                    $input.attr("autocomplete", "off");
                    win.setTimeout(function() {
                        $input.select();
                    }, 1);
                }
            }
 
            className && $input.removeClass(className);
        },
        show: function(selector) {
            $(selector).filter(":data(" + WATERMARK + ")").each(function() {
                $.watermark._show($(this));
            });
        },
        _show: function($input) {
            var val = ($input.val() || EMPTY).replace(/\r/g, EMPTY);
            var text = $input.data(WATERMARK_TEXT) || EMPTY;
            var type = $input.attr("type") || EMPTY;
            var className = $input.data(WATERMARK_CLASS);
 
            if ((val.length === 0 || val === text) && !$input.data(WATERMARK_FOCUS)) {
                if ($input.data(WATERMARK_PASSWORD)) {
                    if (type === "password") {
                        var $wm = $input.data(WATERMARK_PASSWORD) || [];
                        var $wrap = $input.parent() || [];
 
                        if ($wm.length && $wrap.length) {
                            $wrap[0].removeChild($input[0]);
                            $wrap[0].appendChild($wm[0]);
                            $input = $wm;
                            $input.attr("maxLength", text.length);
                        }
                    }
                }
 
                if (type === "text" || type === "search") {
                    var maxLen = $input.attr("maxLength") || 0;
 
                    if (maxLen > 0 && text.length > maxLen) {
                        $input.data(WATERMARK_MAXLENGTH, maxLen);
                        $input.attr("maxLength", text.length);
                    }
                }
 
                className && $input.addClass(className);
                $input.val(text);
            } else {
                $.watermark._hide($input);
            }
        },
        hideAll: function() {
            $.watermark.hide(":text,:password,:search,textarea");
        },
        showAll: function() {
            $.watermark.show(":text,:password,:search,textarea");
        }
    };
 
    $.fn.watermark = $.fn.watermark || function(text, options) {
        if (!this.length) return this;
 
        var hasClass = FALSE;
        var isString = typeof text === "string";
 
        if (isString) {
            text = text.replace(/\r/g, EMPTY);
        }
 
        if (typeof options === "object") {
            hasClass = typeof options.className === "string";
            options = $.extend({}, $.watermark.options, options);
        } else if (typeof options === "string") {
            hasClass = TRUE;
            options = $.extend({}, $.watermark.options, {className: options});
        } else {
            options = $.watermark.options;
        }
 
        if (typeof options.useNative !== "function") {
            options.useNative = options.useNative ? function() { return TRUE; } : function() { return FALSE; };
        }
 
        return this.each(function() {
            var $input = $(this);
 
            if (!$input.is(":text,:search,:password,textarea")) {
                return;
            }
 
            if ($input.data(WATERMARK)) {
                if (isString || hasClass) {
                    $.watermark._hide($input);
                    isString && $input.data(WATERMARK_TEXT, text);
                    hasClass && $input.data(WATERMARK_CLASS, options.className);
                }
            } else {
                if (hasNativePlaceholder && options.useNative.call(this, $input) && ($input.attr("tagName") || EMPTY) !== "TEXTAREA") {
                    if (isString) {
                        $input.attr(PLACEHOLDER, text);
                    }
                    return;
                }
 
                $input.data(WATERMARK_TEXT, isString ? text : EMPTY);
                $input.data(WATERMARK_CLASS, options.className);
                $input.data(WATERMARK, 1);
 
                if (($input.attr("type") || EMPTY) === "password") {
                    var $wrap = $input.wrap("<span>").parent();
                    var $wm = $($wrap.html().replace(/type=["']?password["']?/i, 'type="text"'));
 
                    $wm.data(WATERMARK_TEXT, $input.data(WATERMARK_TEXT));
                    $wm.data(WATERMARK_CLASS, $input.data(WATERMARK_CLASS));
                    $wm.data(WATERMARK, 1);
                    $wm.attr("maxLength", text.length);
 
                    $wm.focus(function() {
                        $.watermark._hide($wm, TRUE);
                    }).bind("dragenter", function() {
                        $.watermark._hide($wm);
                    }).bind("dragend", function() {
                        win.setTimeout(function() { $wm.blur(); }, 1);
                    });
 
                    $input.blur(function() {
                        $.watermark._show($input);
                    }).bind("dragleave", function() {
                        $.watermark._show($input);
                    });
 
                    $wm.data(WATERMARK_PASSWORD, $input);
                    $input.data(WATERMARK_PASSWORD, $wm);
                } else {
                    $input.focus(function() {
                        $input.data(WATERMARK_FOCUS, 1);
                        $.watermark._hide($input, TRUE);
                    }).blur(function() {
                        $input.data(WATERMARK_FOCUS, 0);
                        $.watermark._show($input);
                    }).bind("dragenter", function() {
                        $.watermark._hide($input);
                    }).bind("dragleave", function() {
                        $.watermark._show($input);
                    }).bind("dragend", function() {
                        win.setTimeout(function() { $.watermark._show($input); }, 1);
                    }).bind("drop", function(evt) {
                        var elem = $input[0];
                        var val = elem.value;
                        var text = evt.originalEvent.dataTransfer.getData("Text");
 
                        if ((val || EMPTY).replace(/\r/g, EMPTY).replace(text, EMPTY) === $input.data(WATERMARK_TEXT)) {
                            elem.value = text;
                        }
                        $input.focus();
                    });
                }
 
                // Attach to form submit event
                if (this.form) {
                    var form = this.form;
                    var $form = $(form);
 
                    if (!$form.data(WATERMARK_SUBMIT)) {
                        $form.submit($.watermark.hideAll);
 
                        if (form.submit) {
                            $form.data(WATERMARK_SUBMIT, form.submit);
                            form.submit = (function(f, $f) {
                                return function() {
                                    var nativeSubmit = $f.data(WATERMARK_SUBMIT);
                                    $.watermark.hideAll();
                                    if (nativeSubmit.apply) {
                                        nativeSubmit.apply(f, Array.prototype.slice.call(arguments));
                                    } else {
                                        nativeSubmit();
                                    }
                                };
                            })(form, $form);
                        } else {
                            $form.data(WATERMARK_SUBMIT, 1);
                            form.submit = (function(f) {
                                return function() {
                                    $.watermark.hideAll();
                                    delete f.submit;
                                    f.submit();
                                };
                            })(form);
                        }
                    }
                }
            }
 
            $.watermark._show($input);
        });
    };
 
    // Extend jQuery's selector capabilities to find "data-watermark" elements
    $.extend($.expr[":"], {
        data: $.expr.createPseudo ?
            $.expr.createPseudo(function(dataName) {
                return function(elem) {
                    return !!$.data(elem, dataName);
                };
            }) :
            function(elem, i, match) {
                return !!$.data(elem, match[3]);
            }
    });
 
    // Patch jQuery's val() method to return the watermark text instead of an empty string,
    // when appropriate. Also, add stringToWatermark() method.
    (function(valOld) {
        $.fn.val = function() {
            if (!this.length) {
                return arguments.length ? this : undefined;
            }
 
            // Calling form.submit() doesn't trigger the submit event on the form,
            // so we'll do it manually if there are no arguments passed.
            if (!arguments.length) {
                if (this.data(WATERMARK) && (this[0].value || EMPTY).replace(/\r/g, EMPTY) === (this.data(WATERMARK_TEXT) || EMPTY)) {
                    return EMPTY;
                } else {
                    return valOld.apply(this, arguments);
                }
            } else {
                valOld.apply(this, arguments);
                $.watermark.show(this);
                return this;
            }
        };
 
        $.watermark.runOnce = FALSE;
    })($.fn.val);
 
    $.watermark.runOnce = $.watermark.runOnce && TRUE;
 
    // Hijack any functions found in the triggerFns list
    if ($.watermark.runOnce) {
        $.watermark.runOnce = FALSE;
 
        $.watermark.triggerFns = ["Page_ClientValidate"];
 
        $(function() {
            var i, name, fn;
 
            for (i = 0; i < $.watermark.triggerFns.length; i++) {
                name = $.watermark.triggerFns[i];
                fn = win[name];
 
                if (typeof fn === "function") {
                    win[name] = (function(origFn) {
                        return function() {
                            $.watermark.hideAll();
                            return origFn.apply(null, Array.prototype.slice.call(arguments));
                        };
                    })(fn);
                }
            }
        });
 
        $(win).on("beforeunload", function() {
            if ($.watermark.options.hideBeforeUnload) {
                $.watermark.hideAll();
            }
        });
    }
}));