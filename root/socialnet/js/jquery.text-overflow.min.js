/*
 * jQuery Text Overflow v0.9
 *
 * Licensed under the new BSD License.
 * Copyright 2009-2010, Bram Stein
 * All rights reserved.
 * 
 * (Updated to jQuery 3.7+ and implemented no-conflict mode, integramod.com, December 2024)
 */
 
(function($) {
    // Check if jQuery is available
    if (typeof jQuery === 'undefined') {
        console.error('jQuery Text Overflow: jQuery is not loaded. Please include jQuery before this plugin.');
        return;
    }
 
    // Use a local reference to jQuery, don't modify the global $
    var $j = jQuery.noConflict(true);
 
    var style = document.documentElement.style,
        hasNativeTextOverflow = ("textOverflow" in style || "OTextOverflow" in style);
 
    function getChildNodesUntil(elem, maxLength) {
        var length = 0,
            stack = [],
            ret = $j();
 
        function traverse(nodes) {
            var i, node, nodeLength, newNode;
 
            if (length >= maxLength) {
                return;
            }
 
            for (i = 0; i < nodes.length; i++) {
                node = nodes[i];
 
                if (node.nodeType === 1) {
                    newNode = $j(node.cloneNode(false));
                    ret.eq(-1).append(newNode);
                    ret = ret.add(newNode);
                    traverse(node.childNodes);
                    ret = ret.not(newNode);
                } else if (node.nodeType === 3) {
                    nodeLength = node.length;
                    if (length + nodeLength < maxLength) {
                        ret.eq(-1).append(node.cloneNode(false));
                    } else {
                        newNode = node.cloneNode(false);
                        newNode.textContent = $j.trim(newNode.textContent.substring(0, maxLength - length));
                        ret.eq(-1).append(newNode);
                    }
                    length += nodeLength;
                } else {
                    ret = ret.add(node.cloneNode(false));
                }
            }
        }
 
        ret = ret.add(elem.cloneNode(false));
        traverse(elem.childNodes);
        return ret.children();
    }
 
    $j.fn.textOverflow = function(str, autoUpdate) {
        var more = str || '&#x2026;';
 
        if (!hasNativeTextOverflow) {
            return this.each(function() {
                var el = $j(this),
                    clone = el.clone(),
                    originalContent = el.clone(),
                    originalText = el.text(),
                    originalWidth = el.width(),
                    low = 0,
                    mid = 0,
                    high = originalText.length,
                    reflow = function() {
                        if (originalWidth !== el.width()) {
                            el.replaceWith(originalContent);
                            el = originalContent;
                            originalContent = el.clone();
                            el.textOverflow(str, false);
                            originalWidth = el.width();
                        }
                    };
 
                el.after(clone.hide().css({
                    'position': 'absolute',
                    'width': 'auto',
                    'overflow': 'visible',
                    'max-width': 'inherit'
                }));
 
                if (clone.width() > originalWidth) {
                    while (low < high) {
                        mid = Math.floor(low + ((high - low) / 2));
                        clone.empty().append(getChildNodesUntil(originalContent.get(0), mid)).append(more);
                        if (clone.width() < originalWidth) {
                            low = mid + 1;
                        } else {
                            high = mid;
                        }
                    }
 
                    if (low < originalText.length) {
                        el.empty().append(getChildNodesUntil(originalContent.get(0), low - 1)).append(more);
                    }
                }
 
                clone.remove();
 
                if (autoUpdate) {
                    setInterval(reflow, 200);
                }
            });
        } else {
            return this;
        }
    };
 
    // Expose the plugin to the global jQuery object
    jQuery.fn.textOverflow = $j.fn.textOverflow;
 
})(jQuery);